{
    "sourceFile": ".next/types/app/api/openai/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1686010943410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686010958485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // File: F:\\FrontEndProjects\\react\\NEXTJS\\bard-google-copy\\app\\api\\openai\\route.ts\n-import * as entry from '../../../../../app/api/openai/[...path]/route.js'\n+import * as entry from '../../../../../app/api/openai/route.js'\n import type { NextRequest } from 'next/server.js'\n \n-type TEntry = typeof import('../../../../../app/api/openai/[...path]/route.js')\n+type TEntry = typeof import('../../../../../app/api/openai/route.js')\n \n // Check that the entry is a valid entry\n checkFields<Diff<{\n   GET?: Function\n"
                }
            ],
            "date": 1686010943410,
            "name": "Commit-0",
            "content": "// File: F:\\FrontEndProjects\\react\\NEXTJS\\bard-google-copy\\app\\api\\openai\\route.ts\nimport * as entry from '../../../../../app/api/openai/[...path]/route.js'\nimport type { NextRequest } from 'next/server.js'\n\ntype TEntry = typeof import('../../../../../app/api/openai/[...path]/route.js')\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  GET?: Function\n  HEAD?: Function\n  OPTIONS?: Function\n  POST?: Function\n  PUT?: Function\n  DELETE?: Function\n  PATCH?: Function\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  \n}, TEntry, ''>>()\n\n// Check the prop type of the entry function\nif ('GET' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'GET'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'GET'>>\n      },\n      'GET'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'GET'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'GET'>>\n      },\n      'GET'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('HEAD' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'HEAD'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'HEAD'>>\n      },\n      'HEAD'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'HEAD'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'HEAD'>>\n      },\n      'HEAD'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('OPTIONS' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'OPTIONS'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'OPTIONS'>>\n      },\n      'OPTIONS'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'OPTIONS'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'OPTIONS'>>\n      },\n      'OPTIONS'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('POST' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'POST'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'POST'>>\n      },\n      'POST'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'POST'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'POST'>>\n      },\n      'POST'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('PUT' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'PUT'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'PUT'>>\n      },\n      'PUT'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'PUT'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'PUT'>>\n      },\n      'PUT'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('DELETE' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'DELETE'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'DELETE'>>\n      },\n      'DELETE'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'DELETE'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'DELETE'>>\n      },\n      'DELETE'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('PATCH' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'PATCH'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'PATCH'>>\n      },\n      'PATCH'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<PageParams>,\n      {\n        __tag__: 'PATCH'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'PATCH'>>\n      },\n      'PATCH'\n    >\n  >()\n}\n\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: PageParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\ntype PageParams = any\nexport interface PageProps {\n  params?: any\n  searchParams?: any\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n\n  params?: any\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\ntype ParamCheck<T> = {\n  __tag__: string\n  __param_position__: string\n  __param_type__: T\n}\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n"
        }
    ]
}